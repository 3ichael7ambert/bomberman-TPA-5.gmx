<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bmbman_msk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// direction
dir=0;
// player is invincible for 5 seconds
invincible=300;
// direction to display
sdir=0;
// bomberman changable parameters
if room=openarena
{
rui=choose(1,2,3);
bmbbombs=9;
bmbbombtype=0;
bmbfire=9;
bmbspeed=9;
bmbbombthru=-1;
bmbsoftthru=0;
bmbtoss=1;
bmbpunch=1;
}
else
{
rui=0;
bmbbombs=1;
bmbbombtype=0;
bmbfire=2;
bmbspeed=5;
bmbbombthru=0;
bmbsoftthru=0;
bmbtoss=0;
bmbpunch=0;
}
// is not carrying a bomb
carry=0;
carrytype=0;
carrytoalarm=0;
carryfirepower=0;
carryowner=0;
// temporary sum
sum=0;
// sprite
spr=0;
img=0;
wks=0.9;
// direction sprite row
drsy[0]=0;
drsy[1]=2;
drsy[2]=1;
drsy[3]=3;
// other things
global.mybombstoget[pid]=0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set the correct depth
depth=-(y+16);
// make player flash if he's invincible
if invincible&gt;0
  {
  visible=invincible mod 2;
  invincible-=1;
  }
// antibug
if x&lt;round(x/16)*16+get_speed(bmbspeed) and x&gt;round(x/16)*16-get_speed(bmbspeed) x=round(x/16)*16;
if y&lt;round(y/16)*16+get_speed(bmbspeed) and y&gt;round(y/16)*16-get_speed(bmbspeed) y=round(y/16)*16;
// fill the bomb limit
if global.mybombstoget[pid]&gt;0
{
bmbbombs+=1;
global.mybombstoget[pid]-=1;
}
// if bomberman is stunned, animation progress
if spr=1
  {
  img+=1;
  if img=23 spr=0;
  }
// if bomberman is punching, animation progress
if spr=2
  {
  img+=1;
  if img=14 spr=0;
  }
// if bomberman is jumping on/off rui, animation progress
if spr=3
  {
  if rui=0
    {
    img-=1;
    if img=0 spr=0;
    }
    else
    {
    img+=1;
    if img=24 spr=0;
    }
  }
// if bomberman's green rui is running, animation progress
if spr=4
  {
  bomber_move3(damn);
  if x=xprevious and y=yprevious spr=0;
  }
// if bomberman has any other sprite than walking, stop the script
if spr!=0 exit;
// actions done with bomb setting button
// if it's pressed, bomb taking attempt
if global.bmb_hold[pid,4]=1 bomber_take();
// if it's held, bomb placing attempt
if global.bmb_hold[pid,4]=2 bomber_bomb(round(x/16)*16,round(y/16)*16);
// if it's released, bomb throwing attempt
if global.bmb_hold[pid,4]=3 bomber_throw();
// if a special button is pressed, try to do a special
if global.bmb_hold[pid,6]=1 bomber_special();
// let bomberman walk
canwalk=1;
// walking is done in the worst working way possible, so no comments here.
dor=dir;
as=0;
as+=ceil(global.bmb_hold[pid,0]/10);
as+=ceil(global.bmb_hold[pid,1]/10);
as+=ceil(global.bmb_hold[pid,2]/10);
as+=ceil(global.bmb_hold[pid,3]/10);

damn=dor-2;
if damn&lt;0 damn+=4;
if damn&gt;3 damn-=4;
if global.bmb_hold[pid,damn]=2 bomber_move2(damn);

damn=dor-1;
if damn&lt;0 damn+=4;
if damn&gt;3 damn-=4;
if global.bmb_hold[pid,damn]=2 bomber_move2(damn);

damn=dor+1;
if damn&lt;0 damn+=4;
if damn&gt;3 damn-=4;
if global.bmb_hold[pid,damn]=2 bomber_move2(damn);

damn=dor;
if damn&lt;0 damn+=4;
if damn&gt;3 damn-=4;
if global.bmb_hold[pid,damn]=2 bomber_move2(damn);
// if bomberman is not walking, set the animation frame to standing
if canwalk=1 wks=0.9;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="item_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if the powerup is under brick, stop
if other.visible=0 exit;
sum=0;
// depending on the powerup type, do the action
if other.item=0
  bmbbombs+=1;
if other.item=1
  bmbfire+=1;
if other.item=2
  if bmbspeed&lt;14 bmbspeed+=1;
if other.item=4
  bmbbombthru=-1;
if other.item=5
  bmbtoss=1;
if other.item=6
  bmbpunch=1;
if other.item=7
  {
  if bmbbombtype=0
    bmbbombtype=1;
  if bmbbombtype=2
    bmbbombtype=3;
  }
if other.item=8
  bmbbombthru=1;
if other.item=9
  bmbsoftthru=1;
if other.item=10
  {
  if bmbbombtype=0
    bmbbombtype=2;
  if bmbbombtype=1
    bmbbombtype=3;
  }
if other.item=11
  bmbfire=20;
// rui here! you can add new kinds to randomize
if other.item=12
  {
  // if not carrying anything, sit on rui
  if carry=0 and rui=0
    {
    x=other.x;
    y=other.y;
    rui=choose(1,2,3);
    spr=3;
    img=0;
    invincible=60;
    }
    else
    sum=1;
  }
  else
  {
  sound_play(itempick_snd);
  }

// destroy the powerup object if it has to be destroyed
if sum=0 with(other) instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DIE
if round(x/16)*16=other.x and round(y/16)*16=other.y
bomber_die();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get_bomberman_sprite();
// display walking sprite
if spr=0 or spr=4
  {
  if floor(wks)=4 wks-=4;
  img=floor(wks);
  if img=0 sum=0+carry*(sprx*6);
  if img=1 sum=sprx+carry*(sprx*6);
  if img=2 sum=0+carry*(sprx*6);
  if img=3 sum=sprx*2+carry*(sprx*6);
  if rui!=0 and sdir=0 draw_sprite_part(sprd2,0,sprx2*4,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14);
  draw_sprite_part(sprd,0,sum,drsy[sdir]*sprx,sprx-1,sprx-1,x-((sprx-1)/2-8),y-((sprx-1)-16));
  if rui!=0 and sdir!=0 draw_sprite_part(sprd2,0,sprx2*4,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14);
  if carry=1 and carrytype=0 draw_sprite(bomb_normal,0,x,y-16);
  if carry=1 and carrytype=1 draw_sprite(bomb_bouncy,0,x,y-16);
  if carry=1 and carrytype=2 draw_sprite(bomb_red,0,x,y-16);
  if carry=1 and carrytype=3 draw_sprite(bomb_redbouncy,0,x,y-16);
  }
// display stunned sprite
if spr=1
  {
  if round(img)=0 sum=0;
  if round(img)=1 sum=3;
  if round(img)=2 sum=5;
  if round(img)=3 sum=6;
  if round(img)=4 sum=7;
  if round(img)=5 sum=7;
  if round(img)=6 sum=6;
  if round(img)=7 sum=5;
  if round(img)=8 sum=3;
  if round(img)=9 sum=0;
  if round(img)=10 sum=2;
  if round(img)=11 sum=3;
  if round(img)=12 sum=4;
  if round(img)=13 sum=4;
  if round(img)=14 sum=3;
  if round(img)=15 sum=2;
  if round(img)=16 sum=0;
  if round(img)=17 sum=1;
  if round(img)=18 sum=2;
  if round(img)=19 sum=1;
  if round(img)=20 sum=0;
  if round(img)=21 sum=1;
  if round(img)=22 sum=0;
  if rui!=0 and sdir=0 draw_sprite_part(sprd2,0,0,sprx2*4,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14-sum*2);
  draw_sprite_part(sprd,0,0,sprx*4,sprx-1,sprx-1,x-((sprx-1)/2-8),y-((sprx-1)-16)-sum);
  if rui!=0 and sdir!=0 draw_sprite_part(sprd2,0,0,sprx2*4,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14-sum*2);
  }
// display punching sprite
if spr=2
  {
  if rui!=0 and sdir=0 draw_sprite_part(sprd2,0,sprx2*4,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14);
  draw_sprite_part(sprd,0,sprx*5,drsy[sdir]*sprx,sprx-1,sprx-1,x-((sprx-1)/2-8),y-((sprx-1)-16));
  if rui!=0 and sdir!=0 draw_sprite_part(sprd2,0,sprx2*4,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-14);
  }
// display jumpin on or off rui sprite
if spr=3
  {
  if img=0 sum=0;
  if img=1 sum=9;
  if img=2 sum=17;
  if img=3 sum=23;
  if img=4 sum=28;
  if img=5 sum=32;
  if img=6 sum=35;
  if img=7 sum=37;
  if img=8 sum=38;
  if img=9 sum=39;
  if img=10 sum=39;
  if img=11 sum=40;
  if img=12 sum=40;
  if img=13 sum=40;
  if img=14 sum=39;
  if img=15 sum=39;
  if img=16 sum=38;
  if img=17 sum=37;
  if img=18 sum=35;
  if img=19 sum=32;
  if img=20 sum=28;
  if img=21 sum=23;
  if img=22 sum=17;
  if img=23 sum=14;
  if img=24 sum=14;
  if rui!=0
    {
    if sdir=0 draw_sprite_part(sprd2,0,sprx2*3,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-sum);
    draw_sprite_part(sprd,0,0,drsy[sdir]*sprx,sprx-1,sprx-1,x-((sprx-1)/2-8),y-((sprx-1)-16));
    if sdir!=0 draw_sprite_part(sprd2,0,sprx2*3,drsy[sdir]*sprx2,sprx2-1,sprx2-1,x-((sprx2-1)/2-8),y-((sprx2-1)-16)-sum);
    }
    else
    {
    draw_sprite_part(sprd,0,sprx*3,drsy[sdir]*sprx,sprx-1,sprx-1,x-((sprx-1)/2-8),y-((sprx-1)-16)-sum);
    }
  }</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
